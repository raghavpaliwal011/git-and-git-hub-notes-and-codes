first question arises that what is git ?
answer --> it is a distributive version control system

define:
distributive version control system : it means that everyone in your app developement team has a copy of 
                                      the coding of app on which you are working

git hub : it is the website of git

IMPORTANT THING ABOUT GIT HUB : it saves our all the codes which we have pushed on it 
                                FOR EXAMPLE : you have done an important code and you have broken your laptop
                                              then you can get those codes from git hub 
                                
IMPORTANT --> you can get those codes only if you have pushed them on git hub

THINGS we need to do in git at first:

{1} we need to tell git our name and email
for that we need to enter the following command:

NAME :
        git comfig --global user.name raghav

EMAIL :
        git comfig --global user.email then your email id

to check your email and name enter the following programme:
    name:
            git comfig --global user.name

    email:
            git comfig --global user.email

{2} after that we need to initialize our folder for that enter :
                                                                git init
now to start coding through git enter:
                                        code .

{visual studio code will automatically open}
after opening all the required windows we need to set those in such a way that all are visible

=> now if you are done with the writing of all your codes and you have initialized your folder then save your
   codes and enter git status in git terminal 

   if it shows your files in red colour then it means your files are untracked
   to add your files enter :
                            git add -A in the terminal

after adding the files we need to commit the changes to do it use the following command:
                                                                                        git commit -m "then put your commit message"

TIP : always run git status in the terminal after certain intrevals of time

we can make files in visual studio code but we can also make files through git 
FOR EXAMPLE : i want to make a file named bla bla.py then i will enter:
                                                                        touch bla bla.py 
                                                                        {do it in the terminal}

touch is a command in git which makes files 

if we even write a simple letter in git , it gets modified so add all the files after certain intrevals of time

checkout command : if someone has deleated or spoiled your code then , on that time you can use checkout command
eg : if a boy comes to your house and he deleated all your important codes then you can get your code by
     checkout command.
     git checkout bla bla.py
{it maches your working directory from your last commit}
if there are too many files then you can symply use git checkout -f
{it will mach all your files to your old commit }

git log : this command shows us all the commits which we have done
rm command : this command deleates unwanted files 
for example : git rm bla bla.py

branches: think if you are working in facebook and you see an error in one code of the website , you want to fix
          it , but if you do any mistake the whole website can crash so , in that case you will create a branch

branch is a seperate version of your code , meaning that you can do whatever work you want to do in the coding
of a website without affecting the main working directory

to create a branch you have to first check the branch on which you are : git branch
{if this command shows master then it means that you are all ready to create a branch}
IMPORTANT : you should first check that wether you have commited all your changes or not and if you have not done 
            that it will not create a branch

AFTER checking the branch on which youu are you can create a branch through this command : git branch feature1
{you can create many branches}
to switch to your branch use this command: {git checkout feature1} and to return to your working directory
use this command {git checkout master}
if your code gets good you can merge branch with the working directory : git merge feature1

{this file has been fixed}